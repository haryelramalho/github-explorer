{"version":3,"sources":["assets/logo.svg","assets/github-bg.svg","styles/global.ts","services/api.ts","pages/Dashboard/styles.ts","pages/Dashboard/index.tsx","pages/Repository/styles.ts","pages/Repository/index.tsx","routes/index.tsx","App.tsx","index.tsx"],"names":["module","exports","createGlobalStyle","githubBackground","api","axios","create","baseURL","Title","styled","h1","Form","form","props","hasError","css","shade","Error","span","Repositories","div","Dashboard","useState","newRepo","setNewRepo","inputError","setInputError","storagedRepositories","localStorage","getItem","JSON","parse","repositories","setRepositories","event","a","preventDefault","get","response","repository","data","useEffect","setItem","stringify","src","logoImg","alt","onSubmit","value","onChange","e","target","placeholder","type","map","key","full_name","to","owner","avatar_url","login","description","size","Header","header","RepositoryInfo","section","Issues","Repository","setRepository","issues","setIssues","params","useRouteMatch","then","href","stargazers_count","forks_count","open_issues_count","issue","id","html_url","title","user","Routes","path","exact","component","App","basename","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.92583052.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.04f6798f.svg\";","module.exports = __webpack_public_path__ + \"static/media/github-bg.0b819d63.svg\";","import { createGlobalStyle } from 'styled-components';\n\nimport githubBackground from '../assets/github-bg.svg';\n\nexport default createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    outline: 0;\n    box-sizing: border-box;\n  }\n\n  body {\n    /* Sem repetir, ir 70% para direita e alinhar no topo */\n    background: #F0F0F5 url(${githubBackground}) no-repeat 70% top;\n    -webkit-font-smoothing: antialiased;\n  }\n\n  body, input, button {\n    font: 16px Roboto, sans-serif;\n  }\n\n  #root {\n    /* Para ajudar no mobile, colocar max */\n    max-width: 960px;\n    margin: 0 auto;\n    /* Para o conteúdo não enconstar nas bordas no mobile */\n    padding: 40px 20px;\n  }\n\n  button {\n    cursor: pointer;\n  }\n`;\n","import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'https://api.github.com',\n});\n\nexport default api;\n","import styled, { css } from 'styled-components';\n\nimport { shade } from 'polished';\n\ninterface FormProps {\n  hasError: boolean;\n}\n\nexport const Title = styled.h1`\n  font-size: 48px;\n  line-height: 56px;\n  color: #3a3a3a;\n\n  margin-top: 80px;\n  max-width: 450px;\n`;\n\n/*\n  Posso ter o CSS agrupado, por exemplo, todo input dentro do form vai ter esses estilos;\n  É a mesma coisa que fazer form input {}\n*/\nexport const Form = styled.form<FormProps>`\n  margin-top: 40px;\n  max-width: 700px;\n\n  display: flex;\n\n  input {\n    /* Tentar ocupar o máximo do espaço possível */\n    flex: 1;\n    height: 70px;\n    padding: 0 24px;\n    border: 0;\n    border-radius: 5px 0 0 5px;\n    color: #3a3a3a;\n    border: 2px solid #fff;\n    border-right: 0;\n\n    ${props =>\n      props.hasError &&\n      css`\n        border-color: #c53030;\n      `}\n\n    /* Alterando a cor do placeholder */\n    &::placeholder {\n      color: #a8a8b3;\n    }\n  }\n\n  button {\n    width: 210px;\n    height: 70px;\n    background: #04d361;\n    border-radius: 0 5px 5px 0;\n    border: 0;\n    color: #fff;\n    font-weight: bold;\n    transition: background-color 0.2s;\n\n    &:hover {\n      background: ${shade(0.2, '#04d361')};\n    }\n  }\n`;\n\nexport const Error = styled.span`\n  display: block;\n  color: #c53030;\n  margin-top: 8px;\n`;\n\nexport const Repositories = styled.div`\n  margin-top: 80px;\n  max-width: 700px;\n\n  a {\n    background: #fff;\n    border-radius: 5px;\n    width: 100%;\n    padding: 24px;\n    /* A ancora por padrão vem com display inline */\n    display: block;\n    text-decoration: none;\n    transition: transform 0.2s;\n\n    display: flex;\n    align-items: center;\n\n    /* Verifica se o elemento a foi precedido por outro a e aplica algo a partir do segundo */\n    & + a {\n      margin-top: 16px;\n    }\n\n    /* Da uma mexida na div(a) no eixo x em 10px */\n    &:hover {\n      transform: translateX(10px);\n    }\n\n    img {\n      width: 64px;\n      height: 64px;\n      border-radius: 50%;\n    }\n\n    div {\n      /* Se ajustar ao tamanho que a div tem disponível */\n      flex: 1;\n      margin: 0 16px;\n\n      strong {\n        font-size: 20px;\n        color: #3d3d4d;\n      }\n\n      p {\n        font-size: 18px;\n        color: #a8a8b3;\n        margin-top: 4px;\n      }\n    }\n\n    /* Icones sempre são mostrados em SVG */\n    svg {\n      /* Vai pegar todo espaço disponível pra esquerda e jogar como margem */\n      margin-left: auto;\n      color: #cbcbd6;\n    }\n  }\n`;\n","import React, { useState, useEffect, FormEvent } from 'react';\nimport { FiChevronRight } from 'react-icons/fi';\nimport { Link } from 'react-router-dom';\nimport api from '../../services/api';\n\nimport logoImg from '../../assets/logo.svg';\n\nimport { Title, Form, Repositories, Error } from './styles';\n\n// Não precisa colocar a tipagem de tudo, só as infos que vou utilizar\ninterface Repository {\n  full_name: string;\n  description: string;\n  owner: {\n    login: string;\n    avatar_url: string;\n  };\n}\n\nconst Dashboard: React.FC = () => {\n  const [newRepo, setNewRepo] = useState('');\n  const [inputError, setInputError] = useState('');\n  const [repositories, setRepositories] = useState<Repository[]>(() => {\n    const storagedRepositories = localStorage.getItem(\n      '@githubExplorer:repositories',\n    );\n\n    if (storagedRepositories) return JSON.parse(storagedRepositories); // Transformando pra Array dnv\n\n    return [];\n  });\n\n  useEffect(() => {\n    localStorage.setItem(\n      '@githubExplorer:repositories',\n      JSON.stringify(repositories), // Convertendo pra json (string) pq o localStorage não aceita array\n    );\n  }, [repositories]);\n\n  async function handleAddRepository(\n    event: FormEvent<HTMLFormElement>,\n  ): Promise<void> {\n    event.preventDefault();\n\n    if (!newRepo) {\n      setInputError('Digite autor/nome do repositório');\n      return;\n    }\n\n    try {\n      // Definindo tipo da resposta da api get<Repository>\n      const response = await api.get<Repository>(`repos/${newRepo}`);\n\n      const repository = response.data;\n\n      setRepositories([...repositories, repository]);\n      // Limpando o input\n      setNewRepo('');\n      setInputError('');\n    } catch (err) {\n      setInputError('Erro na busca por esse repositório');\n    }\n  }\n\n  return (\n    <>\n      <img src={logoImg} alt=\"Github Explorer\" />\n      <Title>Explore repositórios no Github</Title>\n\n      {/*\n        Truthy (Valores que não são vazios), falsy\n      */}\n      <Form hasError={!!inputError} onSubmit={handleAddRepository}>\n        <input\n          value={newRepo}\n          // Recuperando o valor do evento\n          onChange={e => setNewRepo(e.target.value)}\n          placeholder=\"Digite o nome do repositório\"\n        />\n        <button type=\"submit\">Pesquisar</button>\n      </Form>\n\n      {inputError && <Error>{inputError}</Error>}\n\n      <Repositories>\n        {repositories.map(repository => (\n          <Link\n            key={repository.full_name}\n            to={`repositories/${repository.full_name}`}\n          >\n            <img\n              src={repository.owner.avatar_url}\n              alt={repository.owner.login}\n            />\n            <div>\n              <strong>{repository.full_name}</strong>\n              <p>{repository.description}</p>\n            </div>\n\n            <FiChevronRight size={20} />\n          </Link>\n        ))}\n      </Repositories>\n    </>\n  );\n};\n\nexport default Dashboard;\n","import styled from 'styled-components';\n\nexport const Header = styled.header`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  a {\n    display: flex;\n    align-items: center;\n    text-decoration: none;\n    color: #a8a8b3;\n    transition: color 0.2s;\n\n    &:hover {\n      color: #666;\n    }\n\n    svg {\n      margin-right: 4px;\n    }\n  }\n`;\n\nexport const RepositoryInfo = styled.section`\n  margin-top: 80px;\n\n  header {\n    display: flex;\n    align-items: center;\n\n    img {\n      width: 120px;\n      height: 120px;\n      border-radius: 50%;\n    }\n\n    div {\n      margin-left: 24px;\n\n      strong {\n        font-size: 36px;\n        color: #3d3d4d;\n      }\n\n      p {\n        font-size: 18px;\n        color: #737380;\n        margin-top: 4px;\n      }\n    }\n  }\n\n  ul {\n    display: flex;\n    list-style: none;\n    margin-top: 40px;\n\n    li {\n      & + li {\n        margin-left: 80px;\n      }\n\n      strong {\n        display: block;\n        font-size: 36px;\n        color: #3d3d4d;\n      }\n\n      span {\n        display: block;\n        margin-top: 4px;\n        color: #6c6c80;\n      }\n    }\n  }\n`;\n\nexport const Issues = styled.div`\n  margin-top: 80px;\n\n  a {\n    background: #fff;\n    border-radius: 5px;\n    width: 100%;\n    padding: 24px;\n    /* A ancora por padrão vem com display inline */\n    display: block;\n    text-decoration: none;\n    transition: transform 0.2s;\n\n    display: flex;\n    align-items: center;\n\n    /* Verifica se o elemento a foi precedido por outro a e aplica algo a partir do segundo */\n    & + a {\n      margin-top: 16px;\n    }\n\n    /* Da uma mexida na div(a) no eixo x em 10px */\n    &:hover {\n      transform: translateX(10px);\n    }\n\n    div {\n      /* Se ajustar ao tamanho que a div tem disponível */\n      flex: 1;\n      margin: 0 16px;\n\n      strong {\n        font-size: 20px;\n        color: #3d3d4d;\n      }\n\n      p {\n        font-size: 18px;\n        color: #a8a8b3;\n        margin-top: 4px;\n      }\n    }\n\n    /* Icones sempre são mostrados em SVG */\n    svg {\n      /* Vai pegar todo espaço disponível pra esquerda e jogar como margem */\n      margin-left: auto;\n      color: #cbcbd6;\n    }\n  }\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useRouteMatch, Link } from 'react-router-dom';\nimport { FiChevronLeft, FiChevronRight } from 'react-icons/fi';\nimport api from '../../services/api';\n\nimport logoImg from '../../assets/logo.svg';\n\nimport { Header, RepositoryInfo, Issues } from './styles';\n\ninterface RepositoryParams {\n  repository: string;\n}\n\ninterface Repository {\n  full_name: string;\n  description: string;\n  stargazers_count: number;\n  forks_count: number;\n  open_issues_count: number;\n  owner: {\n    login: string;\n    avatar_url: string;\n  };\n}\n\ninterface Issue {\n  id: number;\n  title: string;\n  html_url: string;\n  user: {\n    login: string;\n  };\n}\n\nconst Repository: React.FC = () => {\n  // Começando como NULL por que não é um array de respositórios, é um repositório do tipo Repository\n  // Ou seja, se ele não tiver sido buscado ainda, ele é NULL por que não é nem um array nem uma string\n  const [repository, setRepository] = useState<Repository | null>(null);\n  // Nesse caso, não está sendo utilizado o null por que o array de Issues mesmo vazio, continua sendo um array de issues\n  // As issues podem não existir em um projeto por exemplo\n  const [issues, setIssues] = useState<Issue[]>([]);\n\n  const { params } = useRouteMatch<RepositoryParams>();\n\n  useEffect(() => {\n    api.get(`repos/${params.repository}`).then(response => {\n      setRepository(response.data);\n    });\n\n    api.get(`repos/${params.repository}/issues`).then(response => {\n      setIssues(response.data);\n    });\n\n    //   async function loadData(): Promise<void> {\n    //     const [repository, issues] = await Promise.all([\n    //       // Faz com que duas promisses sejam executadas ao mesmo tempo\n    //       api.get(`repos/${params.repository}`),\n    //       api.get(`repos/${params.repository}/issues`),\n    //     ]);\n    //   }\n\n    //   loadData();\n  }, [params.repository]);\n\n  return (\n    <>\n      <Header>\n        <a href=\"/\">\n          <img src={logoImg} alt=\"Github Explorer\" />\n        </a>\n        <Link to=\"/\">\n          <FiChevronLeft size={16} />\n          Voltar\n        </Link>\n      </Header>\n\n      {/* Se caso o meu componente tenha mais de 03 níveis de HTML vale a pena criar outro componente, máximo 02 níveis */}\n      {repository && (\n        <RepositoryInfo>\n          <header>\n            <img\n              src={repository.owner.avatar_url}\n              alt={repository.owner.login}\n            />\n            <div>\n              <strong>{repository.full_name}</strong>\n              <p>{repository.description}</p>\n            </div>\n          </header>\n          <ul>\n            <li>\n              <strong>{repository.stargazers_count}</strong>\n              <span>stars</span>\n            </li>\n            <li>\n              <strong>{repository.forks_count}</strong>\n              <span>forks</span>\n            </li>\n            <li>\n              <strong>{repository.open_issues_count}</strong>\n              <span>issues abertas</span>\n            </li>\n          </ul>\n        </RepositoryInfo>\n      )}\n\n      <Issues>\n        {issues.map(issue => (\n          <a key={issue.id} href={issue.html_url} target=\"_blank\">\n            <div>\n              <strong>{issue.title}</strong>\n              <p>{issue.user.login}</p>\n            </div>\n\n            <FiChevronRight size={20} />\n          </a>\n        ))}\n      </Issues>\n    </>\n  );\n};\n\nexport default Repository;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Dashboard from '../pages/Dashboard';\nimport Repository from '../pages/Repository';\n\nconst Routes: React.FC = () => (\n  <Switch>\n    <Route path=\"/\" exact component={Dashboard} />\n    {/* + => Tudo o que vier faz parte desse parâmetro, que no caso é repository */}\n    <Route path=\"/repositories/:repository+\" component={Repository} />\n  </Switch>\n);\n\nexport default Routes;\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport GlobalStyle from './styles/global';\nimport Routes from './routes';\n\nconst App: React.FC = () => (\n  <>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Routes />\n    </BrowserRouter>\n    <GlobalStyle />\n  </>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App' ;\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}